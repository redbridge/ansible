#!/usr/bin/python
#coding: utf-8 -*-

# (c) 2013, Magnus Bengtsson <mbengtsson@redbridge.se>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

try:
    import molnctrl
    import time
except ImportError:
    print("failed=True msg='molnctrl is required for this module'")

DOCUMENTATION = '''
---
module: cloudstack_vm
short_description: Create/Delete VMs in Cloudstack
description:
   - Create or Remove virtual machines from Cloudstack.
options:
   api_key:
     description:
        - api key to authenticate to Cloudstack
     required: true
     default: None
   secret_key:
     description:
        - secret key used for authentication
     required: true
     default: None
   api_host:
     description:
        - Host for connection to the Cloudstack api
     required: false
     default: 'https://127.0.0.1'
   state:
     description:
        - Indicate desired state of the resource
     choices: ['present', 'absent', 'stopped']
     default: present
   names:
     description:
        - Names of the provisioned vm's, this will controll the number of vm's beeing created
     required: true
     default: None
   template_id:
     description:
        - The id of the template
     required: true
     default: None
   offering_id:
     description:
        - The id of the service offering for the vm
     required: true
     default: None
   key_name:
     description:
        - The ssh key pair name to be used when creating the vm
     required: false
     default: None
   network_id:
     description:
        - The id of the network to provision the vm in
     required: false
     default: None
   use_private_ip:
     description:
       - if set, use the instnace private ip as primary address
     required: false
     default: "false"
     aliases: []
   user_data:
     description:
        - A string containing the user data provided to the vm
     required: false
     default: None
   user_data_file:
     description:
        - A file containing the user data provided to the vm
     required: false
     default: None
   wait:
     description:
        - If the module should wait for the VM to be created.
     required: false
     default: 'yes'
   wait_for:
     description:
        - The amount of time the module should wait for the VM to get into active state
     required: false
     default: 180
requirements: [ "libcloud" ]
author: Magnus Bengtsson <mbengtsson@redbridge.se>
'''

EXAMPLES = '''
# Creates a new VM and attaches to a network and passes metadata to the instance
- local_action:
       module: cloudstack_vm
       state: present
       api_key: 1234567890
       secret_key: 123456789
       api_host: cloud.redbridge.se
       names: vm1
       template_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
       network_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
       offering_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
       key_name: ansible_key
       wait_for: 200
       use_private_ip: yes
       user_data_file: vm1.cloud-init

# Create a few vm's in Cloudstack and run some tasks on them
- name: Create a sandbox instance
  hosts: localhost
  vars:
    names: webnode-1,webnode-2,webnode-3
    state: present
    template_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
    network_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
    offering_id: 4f905f38-e52a-43d2-b6ec-754a13ffb529
  tasks:
    - name: Launch instances
      local_action: gce instance_names=${names} machine_type=${machine_type}
                    image=${image} zone=${zone}
      register: gce
    - name: Wait for SSH to come up
      local_action: wait_for host=${item.public_ip} port=22 delay=10
                    timeout=60 state=started
      with_items: ${gce.instance_data}

- name: Configure instance(s)
  hosts: launched
  sudo: True
  roles:
    - my_awesome_role
    - my_awesome_tasks

- name: Terminate instances
  hosts: localhost
  connection: local
  tasks:
    - name: Terminate instances that were previously launched
      local_action:
        module: gce
        state: 'absent'
        instance_names: ${gce.instance_names}
'''

def _delete_server(module, nova):
    name = None
    try:
        server = nova.servers.list(True, {'name': module.params['name']}).pop()
        nova.servers.delete(server)
    except Exception as e:
        module.fail_json( msg = "Error in deleting vm: %s" % e.message)
    if module.params['wait'] == 'no':
        module.exit_json(changed = True, result = "deleted")
    expire = time.time() + int(module.params['wait_for'])
    while time.time() < expire:
        name = nova.servers.list(True, {'name': module.params['name']})
        if not name:
            module.exit_json(changed = True, result = "deleted")
        time.sleep(5)
    module.fail_json(msg = "Timed out waiting for server to get deleted, please check manually")


def _create_server(module, nova):
    bootargs = [module.params['name'], module.params['image_id'], module.params['flavor_id']]
    bootkwargs = {
                'nics' : module.params['nics'],
                'meta' : module.params['meta'],
                'key_name': module.params['key_name'],
                'security_groups': module.params['security_groups'].split(','),
    }
    if not module.params['key_name']:
        del bootkwargs['key_name']
    try:
        server = nova.servers.create(*bootargs, **bootkwargs)
        server = nova.servers.get(server.id)
    except Exception as e:
            module.fail_json( msg = "Error in creating instance: %s " % e.message)
    if module.params['wait'] == 'yes':
        expire = time.time() + int(module.params['wait_for'])
        while time.time() < expire:
            try:
                server = nova.servers.get(server.id)
            except Exception as e:
                    module.fail_json( msg = "Error in getting info from instance: %s " % e.message)
            if server.status == 'ACTIVE':
                private = [ x['addr'] for x in getattr(server, 'addresses').itervalues().next() if 'OS-EXT-IPS:type' in x and x['OS-EXT-IPS:type'] == 'fixed']
                public  = [ x['addr'] for x in getattr(server, 'addresses').itervalues().next() if 'OS-EXT-IPS:type' in x and x['OS-EXT-IPS:type'] == 'floating']
                module.exit_json(changed = True, id = server.id, private_ip=''.join(private), public_ip=''.join(public), status = server.status, info = server._info)
            if server.status == 'ERROR':
                module.fail_json(msg = "Error in creating the server, please check logs")
            time.sleep(2)

        module.fail_json(msg = "Timeout waiting for the server to come up.. Please check manually")
    if server.status == 'ERROR':
            module.fail_json(msg = "Error in creating the server.. Please check manually")
    private = [ x['addr'] for x in getattr(server, 'addresses').itervalues().next() if x['OS-EXT-IPS:type'] == 'fixed']
    public  = [ x['addr'] for x in getattr(server, 'addresses').itervalues().next() if x['OS-EXT-IPS:type'] == 'floating']
    module.exit_json(changed = True, id = info['id'], private_ip=''.join(private), public_ip=''.join(public), status = server.status, info = server._info)


def _get_server_state(module, nova):
    server = None
    try:
        servers = nova.servers.list(True, {'name': module.params['name']})
        if servers:
            server = servers.pop()
    except Exception as e:
        module.fail_json(msg = "Error in getting the server list: %s" % e.message)
    if server and module.params['state'] == 'present':
        if server.status != 'ACTIVE':
            module.fail_json( msg="The VM is available but not Active. state:" + server.status)
        private = [ x['addr'] for x in getattr(server, 'addresses').itervalues().next() if 'OS-EXT-IPS:type' in x and x['OS-EXT-IPS:type'] == 'fixed']
        public  = [ x['addr'] for x in getattr(server, 'addresses').itervalues().next() if 'OS-EXT-IPS:type' in x and x['OS-EXT-IPS:type'] == 'floating']
        module.exit_json(changed = False, id = server.id, public_ip = ''.join(public), private_ip = ''.join(private), info = server._info)
    if server and module.params['state'] == 'absent':
        return True
    if module.params['state'] == 'absent':
        module.exit_json(changed = False, result = "not present")
    return True



def main():
    module = AnsibleModule(
        argument_spec                   = dict(
        api_key                         = dict(required=True, default=None),
        secret_key                      = dict(required=True),
        api_host                        = dict(default='https://127.0.0.1'),
        name                            = dict(required=True),
        template_id                     = dict(default=None),
        offering_id                     = dict(default=1),
        key_name                        = dict(default=None),
        network_id                      = dict(default=None),
        meta                            = dict(default=None),
        wait                            = dict(default='yes', choices=['yes', 'no']),
        wait_for                        = dict(default=180),
        state                           = dict(default='present', choices=['absent', 'present', 'stopped'])
        ),
    )

    try:
        cs_conn = molnctrl.Initialize(module.params['api_key'],
                                        module.params['secret_key'],
                                        api_host=module.params['api_url']
    except Exception as e:
        module.fail_json( msg = "Error in authenticating to Cloudstack: %s" % e.message)
    if module.params['state'] == 'present':
        if not module.params['template_id']:
            module.fail_json( msg = "Parameter 'template_id' is required if state == 'present'")
        else:
            _get_server_state(module, cs_conn)
            _create_server(module, cs_conn)
    if module.params['state'] == 'absent':
        _get_server_state(module, cs_conn)
        _delete_server(module, cs_conn)
    if module.params['state'] == 'stopped':
        _get_server_state(module, cs_conn)
        _stop_server(module, cs_conn)

# this is magic, see lib/ansible/module.params['common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()

